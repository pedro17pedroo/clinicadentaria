import bcrypt from 'bcrypt';
import { connectDB } from './db.js';
import { User } from '../shared/schema.js';
import mongoose from 'mongoose';
import { storage } from './storage.js';

/**
 * Script de teste para verificar o login
 */

async function testLogin() {
  try {
    console.log('üîó Conectando √† base de dados...');
    await connectDB();
    
    console.log('\nüîç TESTE DE LOGIN COMPLETO');
    console.log('============================');
    
    // Dados de teste
    const testEmail = 'admin@clinica.ao';
    const testPassword = 'admin123';
    
    console.log(`üìß Testando login com: ${testEmail}`);
    console.log(`üîë Password: ${testPassword}`);
    
    // 1. Verificar se o utilizador existe
    console.log('\n1Ô∏è‚É£ Verificando se o utilizador existe...');
    const user = await storage.getUserByEmail(testEmail);
    
    if (!user) {
      console.log('‚ùå Utilizador n√£o encontrado!');
      return;
    }
    
    console.log('‚úÖ Utilizador encontrado:');
    console.log(`   - ID: ${user._id}`);
    console.log(`   - Email: ${user.email}`);
    console.log(`   - Tipo: ${user.userType}`);
    console.log(`   - Tem password: ${user.password ? 'SIM' : 'N√ÉO'}`);
    
    if (user.password) {
      console.log(`   - Password hash: ${user.password.substring(0, 20)}...`);
    }
    
    // 2. Verificar password
    console.log('\n2Ô∏è‚É£ Verificando password...');
    
    if (!user.password) {
      console.log('‚ùå Utilizador n√£o tem password definida!');
      return;
    }
    
    try {
      const isValidPassword = await bcrypt.compare(testPassword, user.password);
      
      if (isValidPassword) {
        console.log('‚úÖ Password correcta!');
      } else {
        console.log('‚ùå Password incorrecta!');
        
        // Testar com outras passwords poss√≠veis
        const otherPasswords = ['password123', 'admin', '123456'];
        console.log('\nüîÑ Testando outras passwords...');
        
        for (const pwd of otherPasswords) {
          const isValid = await bcrypt.compare(pwd, user.password);
          console.log(`   - "${pwd}": ${isValid ? '‚úÖ CORRECTA' : '‚ùå incorrecta'}`);
          if (isValid) break;
        }
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar password:', error);
    }
    
    // 3. Testar outros utilizadores
    console.log('\n3Ô∏è‚É£ Testando outros utilizadores...');
    
    const otherUsers = [
      { email: 'joao.silva@clinica.ao', password: 'medico123' },
      { email: 'maria.santos@clinica.ao', password: 'medica123' },
      { email: 'ana.funcionaria@clinica.ao', password: 'funcionaria123' }
    ];
    
    for (const testUser of otherUsers) {
      const foundUser = await storage.getUserByEmail(testUser.email);
      
      if (foundUser && foundUser.password) {
        const isValid = await bcrypt.compare(testUser.password, foundUser.password);
        console.log(`   - ${testUser.email}: ${isValid ? '‚úÖ OK' : '‚ùå FALHA'}`);
      } else {
        console.log(`   - ${testUser.email}: ‚ùå SEM PASSWORD`);
      }
    }
    
    // 4. Verificar estrutura da base de dados
    console.log('\n4Ô∏è‚É£ Verificando estrutura da base de dados...');
    
    const allUsers = await User.find({}).select('email password userType').exec();
    console.log(`üìä Total de utilizadores: ${allUsers.length}`);
    
    let usersWithPassword = 0;
    let usersWithoutPassword = 0;
    
    for (const u of allUsers) {
      if (u.password && u.password.length > 0) {
        usersWithPassword++;
      } else {
        usersWithoutPassword++;
        console.log(`   ‚ùå SEM PASSWORD: ${u.email}`);
      }
    }
    
    console.log(`‚úÖ Com password: ${usersWithPassword}`);
    console.log(`‚ùå Sem password: ${usersWithoutPassword}`);
    
    // 5. Verificar schema do modelo
    console.log('\n5Ô∏è‚É£ Verificando schema do modelo...');
    
    const userSchema = User.schema;
    const passwordPath = userSchema.path('password');
    
    if (passwordPath) {
      console.log('‚úÖ Campo password existe no schema');
      console.log(`   - Tipo: ${passwordPath.instance}`);
      console.log(`   - Obrigat√≥rio: ${passwordPath.isRequired}`);
    } else {
      console.log('‚ùå Campo password N√ÉO existe no schema!');
    }
    
    const mustChangePasswordPath = userSchema.path('mustChangePassword');
    if (mustChangePasswordPath) {
      console.log('‚úÖ Campo mustChangePassword existe no schema');
    } else {
      console.log('‚ùå Campo mustChangePassword N√ÉO existe no schema!');
    }
    
  } catch (error) {
    console.error('‚ùå ERRO CR√çTICO:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nüîå Conex√£o com a base de dados fechada.');
    process.exit(0);
  }
}

// Executar teste
testLogin();

export { testLogin };