import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

/**
 * Configura√ß√£o da conex√£o MongoDB
 * Utiliza Mongoose para gest√£o da base de dados
 */

// Verificar se a URL da base de dados est√° definida
if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL deve estar definida. Certifique-se de que a base de dados MongoDB est√° configurada."
  );
}

/**
 * Conectar √† base de dados MongoDB
 * @returns Promise<void>
 */
export const connectDB = async (): Promise<void> => {
  try {
    // Configura√ß√µes de conex√£o simplificadas
    const connectionOptions = {
      // Configura√ß√µes b√°sicas
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    };

    // Conectar ao MongoDB
    await mongoose.connect(process.env.DATABASE_URL!, connectionOptions);
    
    console.log('‚úÖ MongoDB conectado com sucesso!');
    console.log(`üìä Base de dados: ${mongoose.connection.name}`);
    console.log(`üåê Host: ${mongoose.connection.host}:${mongoose.connection.port}`);
    
  } catch (error) {
    console.error('‚ùå Erro na conex√£o MongoDB:', error);
    
    // Em ambiente de desenvolvimento, mostrar mais detalhes
    if (process.env.NODE_ENV === 'development') {
      console.error('Detalhes do erro:', {
        message: error instanceof Error ? error.message : 'Erro desconhecido',
        stack: error instanceof Error ? error.stack : undefined
      });
    }
    
    // Terminar o processo em caso de erro cr√≠tico
    process.exit(1);
  }
};

/**
 * Desconectar da base de dados MongoDB
 * √ötil para testes e shutdown graceful
 */
export const disconnectDB = async (): Promise<void> => {
  try {
    await mongoose.disconnect();
    console.log('üîå MongoDB desconectado com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao desconectar MongoDB:', error);
  }
};

/**
 * Verificar o estado da conex√£o
 * @returns boolean - true se conectado, false caso contr√°rio
 */
export const isConnected = (): boolean => {
  return mongoose.connection.readyState === 1;
};

/**
 * Obter informa√ß√µes da conex√£o atual
 * @returns objeto com informa√ß√µes da conex√£o
 */
export const getConnectionInfo = () => {
  const connection = mongoose.connection;
  return {
    readyState: connection.readyState,
    host: connection.host,
    port: connection.port,
    name: connection.name,
    collections: Object.keys(connection.collections)
  };
};

/**
 * Event listeners para monitoriza√ß√£o da conex√£o
 */
mongoose.connection.on('connected', () => {
  console.log('üîó Mongoose conectado ao MongoDB');
});

mongoose.connection.on('error', (err) => {
  console.error('‚ùå Erro de conex√£o Mongoose:', err);
});

mongoose.connection.on('disconnected', () => {
  console.log('üîå Mongoose desconectado do MongoDB');
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë Recebido SIGINT. Encerrando conex√µes...');
  await disconnectDB();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë Recebido SIGTERM. Encerrando conex√µes...');
  await disconnectDB();
  process.exit(0);
});

// Exportar a inst√¢ncia do mongoose para uso direto se necess√°rio
export { mongoose };
export default mongoose;